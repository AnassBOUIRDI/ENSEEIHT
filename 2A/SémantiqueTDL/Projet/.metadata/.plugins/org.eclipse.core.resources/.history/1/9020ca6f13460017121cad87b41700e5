/**
 * 
 */
package fr.n7.stl.block.ast.impl;


import fr.n7.stl.block.ast.Declaration;
import fr.n7.stl.block.ast.Expression;
import fr.n7.stl.block.ast.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.TAMFactory;
import fr.n7.stl.util.SymbolTable;

/**
 * Implementation of the Abstract Syntax Tree node for a instance declaration.
 * @author Marc Pantel
 *
 */
public class InstanceDeclarationImpl implements Instance {

	private SymbolTable<Declaration> localSymbolTable;
	
	/**
	 * Creates a variable declaration instruction node for the Abstract Syntax Tree.
	 * @param _name Name of the declared variable.
	 * @param _type Type of the declared variable.
	 * @param _value Value of the declared variable.
	 */
	public InstanceDeclarationImpl(String _name, Type _type, Expression _value, SymbolTable<Declaration> _symbolTable) {
		super(_name, _type, _value);
		localSymbolTable = new SymbolTable<Declaration>(_symbolTable);
	}

	public InstanceDeclarationImpl(String _name, Type _type, SymbolTable<Declaration> _symbolTable) {
		this(_name,_type,null,_symbolTable);
    }

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return this.type + " " + this.name + " = " + this.value + ";\n";
	}


	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.VariableDeclaration#getRegister()
	 */
	@Override
	public Register getRegister() {
		return this.register;
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.VariableDeclaration#getOffset()
	 */
	@Override
	public int getOffset() {
		return this.offset;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Instruction#checkType()
	 */
	@Override
	public boolean checkType() {
		System.out.println(name + "     " + value );
		return value.getType().compatibleWith(type);	
	}

	@Override
	public int allocateMemory(Register _register, int _offset) {
		this.register 	= _register;
		this.offset 	= _offset;
		return this.type.length();
	}

	@Override
	public Fragment getCode(TAMFactory _factory) {
		Fragment fragment = _factory.createFragment();

		// Prépare une case pour stocker la valeur de la variable déclarée
		fragment.add(_factory.createPush(this.getType().length()));

		// Met sur le haut de la pile la valeur à affecter à la variable
		fragment.append(value.getCode(_factory));

		// Stocke la valeur du haut de la pile dans la case précedemment préparée
		fragment.add(_factory.createStore(getRegister(), getOffset(), getType().length()));

		return fragment;	
	}
	
	public SymbolTable<Declaration> getLocalSymbolTable() {
		return localSymbolTable;
	}
}
