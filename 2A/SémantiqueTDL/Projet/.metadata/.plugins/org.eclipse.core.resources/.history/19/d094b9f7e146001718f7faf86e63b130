/**
 * 
 */
package fr.n7.stl.block.ast;

import java.util.List;

import fr.n7.stl.util.MethodSymbolTable;

/**
 * Factory to create Abstract Syntax Tree nodes for common instructions in programming languages.
 * @author Marc Pantel
 *
 */
public interface InstructionFactory {

	/**
	 * Create a root Block node in the Abstract Syntax Tree.
	 * @return A Block node in the Abstract Syntax Tree.
	 * To be used to create the root of the instruction part in an Abstract Syntax Tree.
	 * Then the branches corresponding to the instruction in the block will be added using the add method
	 * from the Block interface.
	 */
    Block createBlock();
	 
	/**
	 * Create a root Block node in the Abstract Syntax Tree.
	 * @param _content Abstract Syntax Tree of the instructions contained in the block.
	 * @return A Block node in the Abstract Syntax Tree.
	 * To be used when the Abstract Syntax Tree of the branches are already available.
	 */
    Block createBlock(Iterable<Instruction> _content);
	
	/**
	 * Create an embedded Block node in the Abstract Syntax Tree.
	 * @param _context Abstract Syntax Tree of the containing block.
	 * @return A Block node in the Abstract Syntax Tree.
	 */
    Block createBlock(Block _context);
	
	/**
	 * Create an embedded Block node in the Abstract Syntax Tree.
	 * @param _context Abstract Syntax Tree of the containing block.
	 * @param _content Abstract Syntax Tree of the instructions contained in the block.
	 * @return A Block node in the Abstract Syntax Tree.
	 */
    Block createBlock(Block _context, Iterable<Instruction> _content);
	
	/**
	 * Create a constant declaration node in the Abstract Syntax Tree.
	 * @param _name Name of the declared constant.
	 * @param _type Abstract Syntax Tree for the type of the declared constant.
	 * @param _value Abstract Syntax Tree for the initial value of the declared constant.
	 * @return A Constant Declaration node in the Abstract Syntax Tree.
	 */
    ConstantDeclaration createConstantDeclaration(String _name, Type _type, Expression _value);
	
	/**
	 * Create a variable declaration node in the Abstract Syntax Tree.
	 * @param _name Name of the declared variable.
	 * @param _type Abstract Syntax Tree for the type of the declared variable.
	 * @param _value Abstract Syntax Tree for the initial value of the declared variable.
	 * @return A Variable Declaration node in the Abstract Syntax Tree.
	 */
    VariableDeclaration createVariableDeclaration(String _name, Type _type, Expression _value);


    /**
     * Create a variable declaration node in the Abstract Syntax Tree.
     * @param _name Name of the declared variable.
     * @param _type Abstract Syntax Tree for the type of the declared variable.
     * @return A Variable Declaration node in the Abstract Syntax Tree.
     */
    VariableDeclaration createVariableDeclaration(String _name, Type _type);

    /**
	 * Create a type declaration node in the Abstract Syntax Tree.
	 * @param _name Name of the declared type.
	 * @param _type Abstract Syntax Tree for the type associated to the name.
	 * @return A Type Declaration node in the Abstract Syntax Tree.
	 */
    TypeDeclaration createTypeDeclaration(String _name, Type _type);

	/**
	 * Create an assignment node in the Abstract Syntax Tree.
	 * @param _declaration Variable Declaration node in the Abstract Syntax Tree corresponding to the assigned variable.
	 * @param _value Abstract Syntax Tree for the expression whose value is assigned to the variable.
	 * @return An Assignment node in the Abstract Syntax Tree.
	 */
    Instruction createAssignment(VariableDeclaration _declaration, Expression _value);
	
	/**
	 * Create an assignment node in the Abstract Syntax Tree.
	 * @param _assignable Expression node in the Abstract Syntax Tree corresponding to the assignable part.
	 * @param _value Abstract Syntax Tree for the expression whose value is assigned to the assignable part.
	 * @return An Assignment node in the Abstract Syntax Tree.
	 */
    Instruction createAssignment(Expression _assignable, Expression _value);
	
	/**
	 * Create a conditional node in the Abstract Syntax Tree.
	 * @param _condition Expression node in the Abstract Syntax Tree whose value is used 
	 *                   as condition in the evaluation of the conditional when the Conditional node is executed.
	 *                   This node is assigned to the Condition branch of the conditional node.
	 * @param _then TAMInstruction node in the Abstract Syntax Tree that is executed if the condition value is true.
	 *              This node is assigned to the Then branch of the Conditional node.
	 * @param _else TAMInstruction node in the Abstract Syntax Tree that is executed if the condition value is false.
	 *              This node is assigned to the Else branch of the Conditional node.
	 * @return A Conditional node in the Abstract Syntax Tree with both Then and Else branches.
	 */
    Instruction createConditional(Expression _condition, Block _then, Block _else);
	
	/**
	 * Create a conditional node in the Abstract Syntax Tree with only the then part.
	 * @param _condition Expression node in the Abstract Syntax Tree whose value is used 
	 *                   as condition in the evaluation of the conditional when the Conditional node is executed.
	 *                   This node is assigned to the Condition branch of the Conditional node.
	 * @param _then TAMInstruction node in the Abstract Syntax Tree that is evaluated if the condition value is true.
	 *              This node is assigned to the Then branch of the conditional node.
	 * @return A Conditional node in the Abstract Syntax Tree with only a Then branch.
	 */
    Instruction createConditional(Expression _condition, Block _then);
	
	/**
	 * Create a repetition node in the Abstract Syntax Tree.
	 * @param _condition Expression node in the Abstract Syntax Tree whose value is used 
	 *                   as condition in the evaluation of the repetition when the Repetition node is executed.
	 *                   This node is assigned to the Condition branch of the Repetition node.
	 * @param _body TAMInstruction node in the Abstract Syntax Tree that is evaluated if the condition value is true
	 *              before repeating the repetition.
	 * @return A Repetition node in the Abstract Syntax Tree.
	 */
    Instruction createRepetition(Expression _condition, Block _body);
	
	/**
	 * Create a printer node in the Abstract Syntax Tree.
	 * @param _value Expression node in the Abstract Syntax Tree whose value is printed when the Printer node is executed.
	 *               This node is assigned to the Value branch of the Printer node.
	 * @return A Printer node in the Abstract Syntax Tree.
	 */
    Instruction createPrinter(Expression _value);
	
	/***************************************************************************************************************************************************
	 * CONSTRUCTEUR DECLARATION
	 **************************************************************************************************************************************************/
    /**
     * 
     * @param _name Name
     * @param _type type
     * @param _droitAcces droit acces
     * @param _parameters parameters
     * @param _body body
     * @return
     */
    MethodDeclaration createConstructeurDeclaration(String _name, Type _type, Access _droitAcces, List<Type> _parameters, List<Instruction> _body);
	
	
	
	/***************************************************************************************************************************************************
	 * INTERFACE DECLARATION
	 **************************************************************************************************************************************************/
	/**
	* Create a node for an interface declaration in the Abstract Syntax Tree.
	* @param _name interface name
	* @param _elements interface elements
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Interface createInterfaceDeclaration(String _name, List<ElementInterface> _elements);
	
	/**
	* Create a node for an interface declaration in the Abstract Syntax Tree.
	* @param _name interface name
	* @param _generic generic parameter
	* @param _elements interface elements
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Interface createInterfaceDeclaration(String _name, Genericite _generic, List<ElementInterface> _elements);
	
	/**
	* Create a node for an interface declaration in the Abstract Syntax Tree.
	* @param _name interface name
	* @param _extends interface extended
	* @param _elements interface elements
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Interface createInterfaceDeclaration(String _name, List<Interface> _extends, List<ElementInterface> _elements);
	
	/**
	* Create a node for an interface declaration in the Abstract Syntax Tree.
	* @param _name interface name
	* @param _generic generic parameter
	* @param _extends interface extended
	* @param _elements interface elements
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Interface createInterfaceDeclaration(String _name, Genericite _generic, List<Interface> _extends, List<ElementInterface> _elements);
	
	
	/***************************************************************************************************************************************************
	 * CLASS DECLARATION
	 **************************************************************************************************************************************************/
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _tdsm tds des m√©thodes 
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _generic class param
	* @param _implements class implemented
	* @param _extends class extended
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, List<Interface> _implements, Classe _extends, MethodSymbolTable _tdsm);
	

	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _implements class implemented
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, List<Interface> _implements, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _extends class extended
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Classe _extends, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _generic class param
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _generic class param
	* @param _extends class extended
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, Classe _extends, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _generic class param
	* @param _implements class implemented
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, List<Interface> _implements, MethodSymbolTable _tdsm);
	
	/**
	* Create a node for an class declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @param _elements class elements
	* @param _implements class implemented
	* @param _extends class extended
	* @param _tdsm tds des m√©thodes  
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    Classe createClassDeclaration(String _name, List<ElementClasse> _elements, List<Interface> _implements, Classe _extends, MethodSymbolTable _tdsm);


	
	
	/***************************************************************************************************************************************************
	 * FINAL STATIC ATTRIBUTE DECLARATION
	 **************************************************************************************************************************************************/
	/**
	* Create a node for a final static attribute declaration in the Abstract Syntax Tree.
	* @param _name class name
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    ElementInterface createFinalStaticAttributeDeclaration(String _name, Type _type, Expression _value);
	
	/***************************************************************************************************************************************************
	 * ATTRIBUTE DECLARATION
	 **************************************************************************************************************************************************/
	/**
	* Create a node for a final static attribute declaration in the Abstract Syntax Tree.
	* @param _name attribut name
	* @param _access attribut access
	* @param _type type of the following declaration
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    ElementClasse createAttributeDeclaration(String _name, Type _type, Access _access);
	
	/**
	* Create a node for a final static attribute declaration in the Abstract Syntax Tree.
	* @param _name attribut name
	* @param _access attribut access
	* @param _type type of the following declaration
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    ElementClasse createAttributeDeclaration(String _name, Type _type, Access _access, boolean isStatic);
	
	
	/***************************************************************************************************************************************************
	 * METHODE DECLARATION
	 **************************************************************************************************************************************************/
	
	/**
	* Create a node for a final static attribute declaration in the Abstract Syntax Tree.
	* @param _name attribut name
	* @param _access attribut access
	* @param _type type of the following declaration
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    MethodDeclaration createMethodDeclaration(String _name, Type _type, List<Type> _parameters, List<Instruction> _body,
                                              Access _access, boolean _isStatic);
	
	/**
	* Create a node for a final static attribute declaration in the Abstract Syntax Tree.
	* @param _name attribut name
	* @param _access attribut access
	* @param _type type of the following declaration
	* @return Abstract Syntax Tree node for the creation of a collection of values.
	**/
    MethodDeclaration createMethodDeclaration(String _name, Type _type, List<Instruction> _body, Access _access, boolean _isStatic);



    /***************************************************************************************************************************************************
     * SIGNATURE
     **************************************************************************************************************************************************/

    /**
     * Create a signature for a method
     * @param _name method name
     * @param _parametersType list of the types of the parameters of the method
     * @param _returnType the return type of the method
     * @return Abstract Syntax Tree node for the creation of a method signature
     */
    SignatureDeclaration createSignatureDeclaration(String _name, List<Type> _parametersType, Type _returnType);

    /***************************************************************************************************************************************************
     * VOID TYPE
     **************************************************************************************************************************************************/

    /**
     * Create a void type
     * @return a void type
     */
    Type createVoidType();


    /***************************************************************************************************************************************************
     * RETURN
     **************************************************************************************************************************************************/

    /**
     * Create the node for the return of a value in the AST
     * @param _value the value to be returned
     * @return Abstract Syntax Tree node for the return of a value
     */
    Instruction createReturn(Expression _value);


    /***************************************************************************************************************************************************
     * EVALUATE EXPRESSION
     **************************************************************************************************************************************************/

    /**
     * Create a node for the evaluation of an expression in the AST
     * @param _value the expression to be evaluated
     * @return Abstract Syntax Tree node for the evaluation of an expression
     */
    Instruction createEvaluateExpression(Expression _value);
}
