/**
 * 
 */
package fr.n7.stl.block.ast.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import fr.n7.stl.block.ast.AtomicType;
import fr.n7.stl.block.ast.Expression;
import fr.n7.stl.block.ast.FieldDeclaration;
import fr.n7.stl.block.ast.RecordType;
import fr.n7.stl.block.ast.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.TAMFactory;

/**
 * Implementation of the Abstract Syntax Tree node for accessing a field in a record.
 * @author Marc Pantel
 *
 */
public class FieldAccessImpl implements Expression {

	// CHANGED FROM PRIVATE TO PROTECTED
	protected 	Expression record;
	private 	String name;
	private 	FieldDeclaration field;

	/**
	 * 
	 * @param _record record
	 * @param _name name
	 */
	public FieldAccessImpl(Expression _record, String _name) {
		this.record = _record;
		this.name = _name;
	}

	/**
	 * 
	 * @param _record record 
	 * @param _field field
	 */
	public FieldAccessImpl(Expression _record, FieldDeclaration _field) {
		this.record = _record;
		this.field = _field;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return this.record + "." + this.name;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Expression#getType()
	 */
	@Override
	public Type getType() {
		Type recordType = record.getType();

		if (recordType instanceof RecordTypeImpl) {
			if (field == null) {
				field = getField();
			}
			return field.getType();
		} else {
			System.err.println(record.toString() + " ERREUR ENREGISTREMENT");
			return AtomicType.ErrorType;
		}
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Expression#getCode(fr.n7.stl.tam.ast.TAMFactory)
	 */
	@Override
	public Fragment getCode(TAMFactory _factory) {
		Fragment fragment = _factory.createFragment();

		/* Récupère la taille du field courant */
		int currFieldLength = getField().getType().length();

		/* Ajoute le code du record = remonte le record sur la pile */
		fragment.append(record.getCode(_factory));

		/* Supprime les champs jusqu'au notre */
		fragment.add(_factory.createPop(0, getFieldOffset()));

		/* Supprime tous les champs après le notre */
		fragment.add(_factory.createPop(currFieldLength, record.getType().length()-currFieldLength-getFieldOffset()));


		return fragment;
	}


	/**
	* Renvoie le field courant, si il est nul, récupère le field depuis le RecordType
	* @return field declaration
	**/
	protected FieldDeclaration getField() {
		if (field == null) {
			Optional<FieldDeclaration> field = ((RecordTypeImpl)record.getType()).get(name);
			if (field.isPresent()) {
				return field.get();
			}
		}
		return field;
	}

	/**
	* Renvoi l'offset correspondant à ce field declaration
	**/
	protected int getFieldOffset() {
		// TODO : ameliorer complexité (inverser offset)

		int offset = 0;
		boolean found = false;
		int i = 0;

		List<FieldDeclaration> fields = ((RecordType)record.getType()).getFields();
		int size = fields.size();

		List<FieldDeclaration> reversedFields = new ArrayList<FieldDeclaration>(fields);
		Collections.reverse(reversedFields);

		while (!found && i < size) {
			FieldDeclaration currField = reversedFields.get(i);

			if (currField.getName().equals(name)) {
				found = true;
			} else {
				offset += currField.getType().length();
			}
			i++;
		}		

		return offset ;
	}
}
