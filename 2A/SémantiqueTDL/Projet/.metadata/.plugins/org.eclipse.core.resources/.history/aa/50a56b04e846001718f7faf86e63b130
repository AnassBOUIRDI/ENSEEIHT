/**
 * 
 */
package fr.n7.stl.block.ast.impl;

import java.util.ArrayList;
import java.util.List;

import fr.n7.stl.block.ast.ElementInterface;
import fr.n7.stl.block.ast.Genericite;
import fr.n7.stl.block.ast.Interface;
import fr.n7.stl.block.ast.Type;
import fr.n7.stl.tam.ast.Fragment;
import fr.n7.stl.tam.ast.Register;
import fr.n7.stl.tam.ast.TAMFactory;

/**
 * Implementation of the Abstract Syntax Tree node for a interface declaration instruction.
 * @author DUBOIS, GARIBAL, HOTTIN, LARATO
 */
public class InterfaceDeclarationImpl implements Interface{

	private String name;
	private Type type; 
	private List<Interface> extendedInterfaces;
	private List<ElementInterface> elements;
	private Genericite genericParameter;
	private int allocatedSize;

	public InterfaceDeclarationImpl(String _name, Genericite _parameter, List<Interface> _extends, List<ElementInterface> _elements ) {
		name = _name;
		elements = _elements;
		genericParameter= _parameter;
		
		if (extendedInterfaces != null) {
			extendedInterfaces = _extends;
		} else {
			extendedInterfaces = new ArrayList<Interface>();
		}
	}
	
	public InterfaceDeclarationImpl(String _name, List<Interface> _extends, List<ElementInterface> _elements ) {
		this(_name,null,_extends, _elements);
	}
	
	public InterfaceDeclarationImpl(String _name, Genericite _parameter, List<ElementInterface> _elements ) {
		this(_name,_parameter,null, _elements);
	}
	
	public InterfaceDeclarationImpl(String _name, List<ElementInterface> _elements ) {
		this(_name,null,null, _elements);
	}
	
	
	
	
	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	public String toString() {
		int i = 0;
		StringBuilder str = new StringBuilder(" interface " + name + " ");
		
		if (extendedInterfaces.size() != 0) {
			str.append("extends ");
			for (Interface interf: extendedInterfaces) {
				str.append(interf.getName());
				if (i != extendedInterfaces.size()){
					str.append(", ");
				}
				i++;
			}
			
		}

		str.append("{");
		
		for(ElementInterface elt: elements) {
			str.append(elt.toString()+"\n");
		}
		str.append("}");
		
		return str.toString();
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Declaration#getName()
	 */
	@Override
	public String getName() {
		return this.name;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Instruction#checkType()
	 */
	@Override
	public boolean checkType() {
		
		/**
		 * TODO
		 */
		return false;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Instruction#allocateMemory(fr.n7.stl.tam.ast.Register, int)
	 */
	@Override
	public int allocateMemory(Register _register, int _offset) {
		return 0;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.Instruction#getCode(fr.n7.stl.tam.ast.TAMFactory)
	 */
	@Override
	public Fragment getCode(TAMFactory _factory) {
		Fragment fragment = _factory.createFragment();
		
		/**
		 * TODO
		 */
		
		return fragment;
	}

}
