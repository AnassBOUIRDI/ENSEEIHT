/**
 * 
 */
package fr.n7.stl.block.ast.impl;

import java.util.List;

import fr.n7.stl.block.ast.Access;
import fr.n7.stl.block.ast.Assignable;
import fr.n7.stl.block.ast.AtomicType;
import fr.n7.stl.block.ast.BinaryOperator;
import fr.n7.stl.block.ast.Block;
import fr.n7.stl.block.ast.BlockFactory;
import fr.n7.stl.block.ast.BooleanValue;
import fr.n7.stl.block.ast.Classe;
import fr.n7.stl.block.ast.ConstantDeclaration;
import fr.n7.stl.block.ast.Declaration;
import fr.n7.stl.block.ast.ElementClasse;
import fr.n7.stl.block.ast.ElementInterface;
import fr.n7.stl.block.ast.Expression;
import fr.n7.stl.block.ast.FieldDeclaration;
import fr.n7.stl.block.ast.FunctionCall;
import fr.n7.stl.block.ast.Genericite;
import fr.n7.stl.block.ast.Instruction;
import fr.n7.stl.block.ast.Interface;
import fr.n7.stl.block.ast.MethodDeclaration;
import fr.n7.stl.block.ast.RecordType;
import fr.n7.stl.block.ast.Sequence;
import fr.n7.stl.block.ast.SignatureDeclaration;
import fr.n7.stl.block.ast.Type;
import fr.n7.stl.block.ast.TypeDeclaration;
import fr.n7.stl.block.ast.UnaryOperator;
import fr.n7.stl.block.ast.Value;
import fr.n7.stl.block.ast.VariableDeclaration;
import fr.n7.stl.util.MethodSymbolTable;
import fr.n7.stl.util.SymbolTable;

/**
 * Implementation of the factory for building Abstract Syntax Tree node for the Bloc language.
 * @author Marc Pantel
 *
 */
public class BlockFactoryImpl implements BlockFactory {

	/**
	 * 
	 */
	public BlockFactoryImpl() {
	}

	/* (non-Javadoc)
	 * @see fr.n7.block.ast.ASTFactory#createBinaryExpression(fr.n7.block.ast.Expression, fr.n7.block.ast.Expression)
	 */
	@Override
	public Expression createBinaryExpression(Expression _left, BinaryOperator _operator, Expression _right) {
		return new BinaryExpressionImpl(_left,_operator,_right);
	}

	/* (non-Javadoc)
	 * @see fr.n7.block.ast.ASTFactory#createIntegerValue()
	 */
	@Override
	public Value createIntegerValue(String _texte) {
		return new IntegerValueImpl(_texte);
	}

	/* (non-Javadoc)
	 * @see fr.n7.block.ast.ASTFactory#createBlock()
	 */
	@Override
	public Block createBlock(Block _context) {
		return new BlockImpl(_context);
	}

	/* (non-Javadoc)
	 * @see fr.n7.block.ast.ASTFactory#createVariableDeclaration(java.lang.String, fr.n7.block.ast.Type, fr.n7.block.ast.Expression)
	 */
	@Override
	public VariableDeclaration createVariableDeclaration(String _name, Type _type, Expression _initialValue) {
		return new VariableDeclarationImpl(_name,_type,_initialValue);
	}

    /* (non-Javadoc)
     * @see fr.n7.block.ast.ASTFactory#createVariableDeclaration(java.lang.String, fr.n7.block.ast.Type, fr.n7.block.ast.Expression)
     */
    @Override
    public VariableDeclaration createVariableDeclaration(String _name, Type _type) {
        return new VariableDeclarationImpl(_name,_type,null);
    }

	/* (non-Javadoc)
	 * @see fr.n7.block.ast.ASTFactory#createIntegerType()
	 */
	@Override
	public Type createIntegerType() {
		return AtomicType.IntegerType;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createUnaryExpression(fr.n7.stl.block.ast.UnaryOperator, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createUnaryExpression(UnaryOperator _operator, Expression _parameter) {
		return new UnaryExpressionImpl(_operator,_parameter);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createVariableUse(fr.n7.stl.block.ast.VariableDeclaration)
	 */
	@Override
	public Expression createVariableUse(VariableDeclaration _declaration) {
		return new VariableUseImpl(_declaration);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createVariableAssignment(fr.n7.stl.block.ast.VariableDeclaration)
	 */
	@Override
	public Assignable createVariableAssignment(VariableDeclaration _declaration) {
		return new VariableAssignmentImpl(_declaration);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createConditional(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Block, fr.n7.stl.block.ast.Block)
	 */
	@Override
	public Instruction createConditional(Expression _condition, Block _then, Block _else) {
		return new ConditionalImpl(_condition,_then,_else);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createRepetition(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Block)
	 */
	@Override
	public Instruction createRepetition(Expression _condition, Block _body) {
		return new RepetitionImpl(_condition,_body);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createBooleanType()
	 */
	@Override
	public Type createBooleanType() {
		return AtomicType.BooleanType;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createCoupleType(fr.n7.stl.block.ast.Type, fr.n7.stl.block.ast.Type)
	 */
	@Override
	public Type createCoupleType(Type _first, Type _second) {
		return new CoupleTypeImpl( _first, _second);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createCouple(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createCouple(Expression _first, Expression _second) {
		return new CoupleImpl(_first, _second);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createPrinter(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Instruction createPrinter(Expression _value) {
		return new PrinterImpl(_value);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createFirst(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createFirst(Expression _parameter) {
		return new UnaryExpressionImpl(UnaryOperator.First,_parameter);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createSecond(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createSecond(Expression _parameter) {
		return new UnaryExpressionImpl(UnaryOperator.Second,_parameter);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createAssignment(fr.n7.stl.block.ast.VariableDeclaration, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Instruction createAssignment(VariableDeclaration _declaration, Expression _value) {
		return new AssignmentImpl(_declaration,_value);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createAssignment(fr.n7.stl.block.ast.VariableDeclaration, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Instruction createAssignment(Expression _assignable, Expression _value) {
		return new AssignmentImpl(_assignable,_value);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createBooleanValue(boolean)
	 */
	@Override
	public Value createBooleanValue(boolean _value) {
		if (_value) {
			return BooleanValue.True;
		} else {
			return BooleanValue.False;
		}
	}
	

	@Override
	public Value createCharacterValue(String _value) {
		// TODO Auto-generated method stub
		return new CharacterValueImpl(_value);
	}

	@Override
	public Value createStringValue(String _value) {
		// TODO Auto-generated method stub
		return new StringValueImpl(_value);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createFunctionCall(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public FunctionCall createFunctionCall(Expression _function) {
		return new FunctionCallImpl(_function);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createArrayAccess(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createArrayAccess(Expression _array, Expression _index) {
		return new ArrayAccessImpl(_array,_index);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createArrayAssignment(fr.n7.stl.block.ast.Assignable, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Assignable createArrayAssignment(Assignable _array, Expression _index) {
		return new ArrayAssignmentImpl(_array,_index);
	}


	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createFieldAccess(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.FieldDeclaration)
	 */
	@Override
	public Expression createFieldAccess(Expression _record, FieldDeclaration _field) {
		return new FieldAccessImpl(_record,_field);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createFieldAssignment(fr.n7.stl.block.ast.Assignable, fr.n7.stl.block.ast.FieldDeclaration)
	 */
	@Override
	public Assignable createFieldAssignment(Assignable _record, FieldDeclaration _field) {
		return new FieldAssignmentImpl(_record,_field);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createFieldAccess(fr.n7.stl.block.ast.Expression, java.lang.String)
	 */
	@Override
	public Expression createFieldAccess(Expression _record, String _name) {
		return new FieldAccessImpl(_record, _name);
	}
	
	@Override
	public Assignable createFieldAssignment(Assignable _record, String _name) {
		return new FieldAssignmentImpl(_record, _name);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createBlock()
	 */
	@Override
	public Block createBlock() {
		return createBlock((Block)null);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createBlock(java.lang.Iterable)
	 */
	@Override
	public Block createBlock(Iterable<Instruction> _content) {
		Block _local = createBlock();
		_local.addAll(_content);
		return _local;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createBlock(fr.n7.stl.block.ast.Block, java.lang.Iterable)
	 */
	@Override
	public Block createBlock(Block _context, Iterable<Instruction> _content) {
		Block _local = createBlock(_context);
		_local.addAll(_content);
		return _local;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createConditional(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Block)
	 */
	@Override
	public Instruction createConditional(Expression _condition, Block _then) {
		return new ConditionalImpl(_condition,_then);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createRecordType(java.lang.Iterable)
	 */
	@Override
	public RecordType createRecordType(String _name, Iterable<FieldDeclaration> _fields) {
		return new RecordTypeImpl(_name, _fields);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createRecordType()
	 */
	@Override
	public RecordType createRecordType(String _name) {
		return new RecordTypeImpl(_name);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createConstantDeclaration(java.lang.String, fr.n7.stl.block.ast.Type, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public ConstantDeclaration createConstantDeclaration(String _name, Type _type, Expression _value) {
		return new ConstantDeclarationImpl(_name,_type,_value);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.InstructionFactory#createTypeDeclaration(java.lang.String, fr.n7.stl.block.ast.Type)
	 */
	@Override
	public TypeDeclaration createTypeDeclaration(String _name, Type _type) {
		return new TypeDeclarationImpl(_name,_type);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createArrayType(fr.n7.stl.block.ast.Type)
	 */
	@Override
	public Type createArrayType(Type _element) {
		return new ArrayTypeImpl(_element);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createPointerType(fr.n7.stl.block.ast.Type)
	 */
	@Override
	public Type createPointerType(Type _element) {
		return new PointerTypeImpl(_element);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createFunctionType(fr.n7.stl.block.ast.Type, java.lang.Iterable)
	 */
	@Override
	public Type createFunctionType(Type _result, Iterable<Type> _parameters) {
		return new MethodeTypeImpl(_result,_parameters);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createFieldDeclaration(java.lang.String, fr.n7.stl.block.ast.Type)
	 */
	@Override
	public FieldDeclaration createFieldDeclaration(String _name, Type _type) {
		return new FieldDeclarationImpl(_name,_type);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createTypeConversion(fr.n7.stl.block.ast.Expression, fr.n7.stl.block.ast.Type)
	 */
	@Override
	public Expression createTypeConversion(Expression _target, Type _type) {
		return new TypeConversionImpl(_target,_type);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createCollection()
	 */
	@Override
	public Sequence createSequence() {
		return new SequenceImpl();
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createCollection(java.lang.Iterable)
	 */
	@Override
	public Sequence createSequence(Iterable<Expression> _values) {
		return new SequenceImpl(_values);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createNamedType(fr.n7.stl.block.ast.TypeDeclaration)
	 */
	@Override
	public Type createNamedType(TypeDeclaration _declaration) {
		return new NamedTypeImpl(_declaration);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createPointerAccess(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createPointerAccess(Expression _pointer) {
		return new PointerAccessImpl(_pointer);
	}
	
	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createPointerAssignment(fr.n7.stl.block.ast.Assignable)
	 */
	@Override
	public Assignable createPointerAssignment(Assignable _pointer) {
		return new PointerAssignmentImpl(_pointer);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createFloatingType()
	 */
	@Override
	public Type createFloatingType() {
		return AtomicType.FloatingType;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createCharType()
	 */
	@Override
	public Type createCharType() {
		return AtomicType.CharacterType;
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.TypeFactory#createStringType()
	 */
	@Override
	public Type createStringType() {
		return AtomicType.StringType;
	}


	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createAddressAccess(fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createAddressAccess(Expression _expr){
		return new AddressAccessImpl(_expr);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createArrayAllocation(fr.n7.stl.block.ast.Type, fr.n7.stl.block.ast.Expression)
	 */
	@Override
	public Expression createArrayAllocation(Type _type, Expression _expr){
		return new ArrayAllocationImpl(_type, _expr);
	}

	/* (non-Javadoc)
	 * @see fr.n7.stl.block.ast.ExpressionFactory#createPointerAllocation(fr.n7.stl.block.ast.Type)
	 */
	@Override
	public Expression createPointerAllocation(Type _type){
		return new PointerAllocationImpl(_type);
	}


	/***************************************************************************************************************************************************
	 * INTERFACE DECLARATION
	 **************************************************************************************************************************************************/
	@Override
	public Interface createInterfaceDeclaration(String _name, List<ElementInterface> _elements){
		return new InterfaceDeclarationImpl(_name, _elements);
	}
	
	@Override
	public Interface createInterfaceDeclaration(String _name, Genericite _generic, List<ElementInterface> _elements){
		return new InterfaceDeclarationImpl(_name, _generic, _elements);
	}
	
	@Override
	public Interface createInterfaceDeclaration(String _name, List<Interface> _extends,List<ElementInterface> _elements){
		return new InterfaceDeclarationImpl(_name, _extends,_elements);
	}
	
	@Override
	public Interface createInterfaceDeclaration(String _name, Genericite _generic, List<Interface> _extends, List<ElementInterface> _elements){
		return new InterfaceDeclarationImpl(_name, _generic, _extends, _elements);
	}
	
	/***************************************************************************************************************************************************
	 * CLASS CONSTRUCTEUR
	 **************************************************************************************************************************************************/
	@Override
	public MethodDeclaration createConstructeurDeclaration(String _name, Type _type, Access _access, List<Type> _parameters, List<Instruction> _body){
		return new MethodDeclarationImpl(_name, _type, _parameters, _body, _access, false);
	}	
	
	/***************************************************************************************************************************************************
	 * INSTANCE DECLARATION
	 **************************************************************************************************************************************************/
	public Expression createInstanceValueImpl(SymbolTable<Declaration> _symbolTable, Classe _classe){
		return new InstanceValueImpl(_symbolTable, _classe);
	}
	/***************************************************************************************************************************************************
	 * CLASS DECLARATION
	 **************************************************************************************************************************************************/
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, List<Interface> _implements, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements, _implements, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Classe _extends, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements,  _extends, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements,  _generic, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, Classe _extends, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements,  _generic,_extends, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, List<Interface> _implements, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements, _generic, _implements, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, List<Interface> _implements, Classe _extends, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements, _implements, _extends, _tdsm);
	}
	
	@Override
	public Classe createClassDeclaration(String _name, List<ElementClasse> _elements, Genericite _generic, List<Interface> _implements, Classe _extends, MethodSymbolTable _tdsm){
		return new ClassDeclarationImpl(_name, _elements, _generic, _implements, _extends, _tdsm);
	}	

	/***************************************************************************************************************************************************
	 * FINAL STATIC ATTRIBUTE DECLARATION
	 **************************************************************************************************************************************************/
	@Override
	public ElementInterface createFinalStaticAttributeDeclaration(String _name, Type _type, Expression _value){
		return new FinalStaticAttributeDeclarationImpl(_name, _type, _value);
	}
	
	
	/***************************************************************************************************************************************************
	 * ATTRIBUTE DECLARATION
	 **************************************************************************************************************************************************/
	
	@Override
	public ElementClasse createAttributeDeclaration(String _name, Type _type, Access _access) {
        return new AttributeDeclarationImpl(_name, _type, _access, false);
	}

	@Override
	public ElementClasse createAttributeDeclaration(String _name, Type _type, Access _access, boolean isStatic){
		return new AttributeDeclarationImpl(_name, _type, _access, isStatic);
	}

	/***************************************************************************************************************************************************
	 * METHODE DECLARATION
	 **************************************************************************************************************************************************/
	
	@Override
	public MethodDeclaration createMethodDeclaration(String _name, Type _type, List<Type> _parameters,
                                                     List<Instruction> _body, Access _access, boolean _isStatic) {
        return new MethodDeclarationImpl(_name, _type, _parameters, _body, _access, _isStatic);
	}

	@Override
	public MethodDeclaration createMethodDeclaration(String _name, Type _type, List<Instruction> _body, Access _access, boolean _isStatic) {
        return new MethodDeclarationImpl(_name, _type, new ArrayList<Type>(), _body, _access, _isStatic);
	}


    /***************************************************************************************************************************************************
     * SIGNATURE
     **************************************************************************************************************************************************/
    @Override
    public SignatureDeclaration createSignatureDeclaration(String _name, List<Type> _parametersType, Type _returnType) {
        return new SignatureDeclarationImpl(_name, _parametersType, _returnType);
    }

    /***************************************************************************************************************************************************
     * SIGNATURE VOID
     **************************************************************************************************************************************************/
    @Override
    public Type createVoidType() {
        return new VoidTypeImpl();
    }

    /***************************************************************************************************************************************************
     * RETURN
     **************************************************************************************************************************************************/

    @Override
    public Instruction createReturn(Expression _value) {
        return new ReturnImpl(_value);
    }

    /***************************************************************************************************************************************************
     * EVALUATE EXPRESSION
     **************************************************************************************************************************************************/

    @Override
    public Instruction createEvaluateExpression(Expression _value) {
        return new EvaluateExpressionImpl(_value);
    }

    /***************************************************************************************************************************************************
     * METHOD CALL
     **************************************************************************************************************************************************/

    @Override
    public Expression createMethodCall(MethodDeclaration _methodDeclaration, List<Expression> _arguments) {
        return new MethodCallImpl(_methodDeclaration, _arguments);
    }
}
