/*
 * generated by Xtext 2.10.0
 */
package fr.enseeiht.gls.projet404.serializer;

import com.google.inject.Inject;
import fr.enseeiht.gls.projet404.games.Condition;
import fr.enseeiht.gls.projet404.games.Difficulty;
import fr.enseeiht.gls.projet404.games.ElementJeuFact;
import fr.enseeiht.gls.projet404.games.Game;
import fr.enseeiht.gls.projet404.games.GamesPackage;
import fr.enseeiht.gls.projet404.games.Interaction;
import fr.enseeiht.gls.projet404.games.Item;
import fr.enseeiht.gls.projet404.games.ItemInCondition;
import fr.enseeiht.gls.projet404.games.ItemInSomething;
import fr.enseeiht.gls.projet404.games.Knowledge;
import fr.enseeiht.gls.projet404.games.Path;
import fr.enseeiht.gls.projet404.games.People;
import fr.enseeiht.gls.projet404.games.Place;
import fr.enseeiht.gls.projet404.games.Player;
import fr.enseeiht.gls.projet404.games.Proposition;
import fr.enseeiht.gls.projet404.games.Recipe;
import fr.enseeiht.gls.projet404.services.GamesGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GamesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GamesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamesPackage.ACTION:
				sequence_Action(context, (fr.enseeiht.gls.projet404.games.Action) semanticObject); 
				return; 
			case GamesPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GamesPackage.DIFFICULTY:
				sequence_Difficulty(context, (Difficulty) semanticObject); 
				return; 
			case GamesPackage.ELEMENT_JEU_FACT:
				sequence_ElementJeuFact(context, (ElementJeuFact) semanticObject); 
				return; 
			case GamesPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GamesPackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GamesPackage.ITEM:
				sequence_Item(context, (Item) semanticObject); 
				return; 
			case GamesPackage.ITEM_IN_CONDITION:
				sequence_ItemInCondition(context, (ItemInCondition) semanticObject); 
				return; 
			case GamesPackage.ITEM_IN_SOMETHING:
				sequence_ItemInSomething(context, (ItemInSomething) semanticObject); 
				return; 
			case GamesPackage.KNOWLEDGE:
				sequence_Knowledge(context, (Knowledge) semanticObject); 
				return; 
			case GamesPackage.PATH:
				sequence_Path(context, (Path) semanticObject); 
				return; 
			case GamesPackage.PEOPLE:
				sequence_People(context, (People) semanticObject); 
				return; 
			case GamesPackage.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case GamesPackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case GamesPackage.PROPOSITION:
				sequence_Proposition(context, (Proposition) semanticObject); 
				return; 
			case GamesPackage.RECIPE:
				sequence_Recipe(context, (Recipe) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         val=Actions 
	 *         interSuivante=Interaction? 
	 *         knowledgeGiven+=[Knowledge|ID]* 
	 *         itemsGiven+=ItemInSomething* 
	 *         itemsConsumed+=ItemInSomething* 
	 *         conditionsActionsAvailable+=Condition* 
	 *         game=[Game|ID]
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, fr.enseeiht.gls.projet404.games.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=STRING player=[Player|ID] know+=[Knowledge|ID]* item+=ItemInCondition*)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Difficulty returns Difficulty
	 *
	 * Constraint:
	 *     (lvl=INT sizeMax=INT (items+=ItemInSomething items+=ItemInSomething*)? knowledges+=[Knowledge|ID]*)
	 */
	protected void sequence_Difficulty(ISerializationContext context, Difficulty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementJeuFact returns ElementJeuFact
	 *
	 * Constraint:
	 *     (description=STRING visible=INT cond+=Condition*)
	 */
	protected void sequence_ElementJeuFact(ISerializationContext context, ElementJeuFact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         player=Player 
	 *         places+=Place 
	 *         places+=Place* 
	 *         (knowledge+=Knowledge knowledge+=Knowledge*)? 
	 *         people+=People 
	 *         people+=People* 
	 *         (items+=Item items+=Item*)? 
	 *         path+=Path 
	 *         path+=Path* 
	 *         (recipes+=Recipe recipes+=Recipe*)? 
	 *         startPlace=[Place|ID] 
	 *         endPlace+=[Place|ID]+ 
	 *         difficulty=Difficulty
	 *     )
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=STRING prop+=Proposition* conditionsBegin+=Condition* conditionsEnd+=Condition*)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemInCondition returns ItemInCondition
	 *
	 * Constraint:
	 *     (item=[Item|ID] quantity=INT mustBeExact=INT)
	 */
	protected void sequence_ItemInCondition(ISerializationContext context, ItemInCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__ITEM));
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__QUANTITY));
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__MUST_BE_EXACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.ITEM_IN_CONDITION__MUST_BE_EXACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemInConditionAccess().getItemItemIDTerminalRuleCall_0_0_1(), semanticObject.getItem());
		feeder.accept(grammarAccess.getItemInConditionAccess().getQuantityINTTerminalRuleCall_2_0(), semanticObject.getQuantity());
		feeder.accept(grammarAccess.getItemInConditionAccess().getMustBeExactINTTerminalRuleCall_4_0(), semanticObject.getMustBeExact());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ItemInSomething returns ItemInSomething
	 *
	 * Constraint:
	 *     (item=[Item|ID] quantite=INT)
	 */
	protected void sequence_ItemInSomething(ISerializationContext context, ItemInSomething semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.ITEM_IN_SOMETHING__ITEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.ITEM_IN_SOMETHING__ITEM));
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.ITEM_IN_SOMETHING__QUANTITE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.ITEM_IN_SOMETHING__QUANTITE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemInSomethingAccess().getItemItemIDTerminalRuleCall_0_0_1(), semanticObject.getItem());
		feeder.accept(grammarAccess.getItemInSomethingAccess().getQuantiteINTTerminalRuleCall_2_0(), semanticObject.getQuantite());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Item returns Item
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         size=INT 
	 *         description=STRING 
	 *         visible=INT 
	 *         conditionsVisible+=Condition* 
	 *         active=INT 
	 *         conditionsActive+=Condition* 
	 *         canPutDown=INT 
	 *         conditionsPutDown+=Condition* 
	 *         conditionsGive+=Condition* 
	 *         conditionsConsumed+=Condition*
	 *     )
	 */
	protected void sequence_Item(ISerializationContext context, Item semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Knowledge returns Knowledge
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING 
	 *         visible=INT 
	 *         conditionsVisible+=Condition* 
	 *         active=INT 
	 *         conditionsActive+=Condition* 
	 *         conditionsGive+=Condition*
	 *     )
	 */
	protected void sequence_Knowledge(ISerializationContext context, Knowledge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Path returns Path
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING 
	 *         visible=INT 
	 *         conditionVisible+=Condition* 
	 *         endPlace=[Place|ID] 
	 *         isOpen=INT 
	 *         conditionsOpening+=Condition* 
	 *         isMandatory=INT 
	 *         knowledgeGiven+=[Knowledge|ID]* 
	 *         itemsGiven+=ItemInSomething* 
	 *         itemsConsumed+=ItemInSomething*
	 *     )
	 */
	protected void sequence_Path(ISerializationContext context, Path semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     People returns People
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING 
	 *         visible=INT 
	 *         conditionsVisible+=Condition* 
	 *         active=INT 
	 *         conditionsActive+=Condition* 
	 *         isMandatory=INT 
	 *         interaction=Interaction?
	 *     )
	 */
	protected void sequence_People(ISerializationContext context, People semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns Place
	 *
	 * Constraint:
	 *     (name=ID knowledges+=[Knowledge|ID]* people+=[People|ID]* paths+=[Path|ID]* objects+=ItemInSomething*)
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Player returns Player
	 *
	 * Constraint:
	 *     (name=STRING items+=ItemInSomething* knowledge+=[Knowledge|ID]*)
	 */
	protected void sequence_Player(ISerializationContext context, Player semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Proposition returns Proposition
	 *
	 * Constraint:
	 *     (value=STRING act=Action)
	 */
	protected void sequence_Proposition(ISerializationContext context, Proposition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.PROPOSITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.PROPOSITION__VALUE));
			if (transientValues.isValueTransient(semanticObject, GamesPackage.Literals.PROPOSITION__ACT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamesPackage.Literals.PROPOSITION__ACT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropositionAccess().getValueSTRINGTerminalRuleCall_3_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getPropositionAccess().getActActionParserRuleCall_4_0(), semanticObject.getAct());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Recipe returns Recipe
	 *
	 * Constraint:
	 *     (name=ID objectsUsed+=ItemInSomething* conditions+=Condition* itemsMade+=ItemInSomething*)
	 */
	protected void sequence_Recipe(ISerializationContext context, Recipe semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
