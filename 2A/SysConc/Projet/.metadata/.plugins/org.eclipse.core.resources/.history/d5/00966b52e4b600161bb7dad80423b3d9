package linda.shm;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import linda.Callback;
import linda.Linda;
import linda.Tuple;

/** Shared memory implementation of Linda. */
public class CentralizedLinda implements Linda {

	private List<Tuple> tuples;
	private Condition cond_take;
	private Condition cond_read;
	private Lock lock;
	
    public CentralizedLinda() {
    	tuples = new ArrayList<Tuple>();
    	lock = new ReentrantLock();
    	cond_take = lock.newCondition();
    	cond_read = lock.newCondition();
    }

	@Override
	public void write(Tuple t) {
		tuples.add(t);
		cond_take.signal();
		cond_read.signal();
	}

	@Override
	public Tuple take(Tuple template) {
		Tuple returnedTuple = null;
		int i = 0;
		
		while (returnedTuple == null) {
			while (i<tuples.size() && returnedTuple == null) {
				if (tuples.get(i).matches(template)) {
					returnedTuple = tuples.get(i);
					tuples.remove(i);
				}
			}
			i = 0;
			try {
				cond_take.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		return returnedTuple;
	}

	@Override
	public Tuple read(Tuple template) {
		Tuple returnedTuple = null;
		int i = 0;
		
		while (returnedTuple == null) {
			while (i<tuples.size() && returnedTuple == null) {
				if (tuples.get(i).matches(template)) {
					returnedTuple = tuples.get(i);
				}
			}
			i = 0;
			try {
				cond_take.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		return returnedTuple;
	}

	@Override
	public Tuple tryTake(Tuple template) {
		Tuple returnedTuple = null;
		int i = 0;
		
		while (i<tuples.size() && returnedTuple == null) {
			if (tuples.get(i).matches(template)) {
				returnedTuple = tuples.get(i);
				tuples.remove(i);
			}
		}
		
		return returnedTuple;
	}

	@Override
	public Tuple tryRead(Tuple template) {
		Tuple returnedTuple = null;
		int i = 0;
		
		while (i<tuples.size() && returnedTuple == null) {
			if (tuples.get(i).matches(template)) {
				returnedTuple = tuples.get(i);
			}
		}
		
		return returnedTuple;
	}

	@Override
	public Collection<Tuple> takeAll(Tuple template) {
		List<Tuple> tuplesReturned = new ArrayList<Tuple>();
		
		for (Tuple t: tuples) {
			if (t.matches(template)) {
				tuplesReturned.add(t);
			}
		}
		
		tuples.removeAll(tuplesReturned);
		
		return tuplesReturned;
	}

	@Override
	public Collection<Tuple> readAll(Tuple template) {
		List<Tuple> tuplesReturned = new ArrayList<Tuple>();
		
		for (Tuple t: tuples) {
			if (t.matches(template)) {
				tuplesReturned.add(t);
			}
		}
				
		return tuplesReturned;
	}

	@Override
	public void eventRegister(eventMode mode, eventTiming timing, Tuple template, Callback callback) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void debug(String prefix) {
		// TODO Auto-generated method stub
		
	}
}
