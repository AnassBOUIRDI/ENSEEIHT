
(* PGCD : Algorithme Euclide *)

theory PGCD

  use import int.Int

  function pgcd(a b : int) : int

  
  axiom pgcd_a_a : forall a,b : int. a = b ->  pgcd a b = a
  axiom pgcd_a_b : forall a,b : int. (a <= b -> pgcd a b = pgcd a (b-a)) && ((a > b) -> pgcd a b = pgcd (a-b) b)
  

end

module PGCDEuclide

  use import int.Int
  use import ref.Refint
  use import PGCD

  let pgcd_euclide (a b: int) : int
    requires { 0 < a && 0 < b }
    ensures  { result = (pgcd a b)}
  =
    let ap = ref a in
    let bp = ref b in
    while (!ap <> !bp) do
      invariant { pgcd !ap !bp = pgcd a b && !ap > 0 && !bp>0 }
      variant   { !ap + !bp }
      if (!ap <= !bp) then
      	 bp := !bp - !ap
      else
      	 ap := !ap - !bp
    done;
    !ap

end
