module ual(a[31..0],b[31..0],cmd[5..0] : s[31..0],eVC,eN,eZ,N,Z,V,C)
	decoder6to64(cmd[5..0],decode[63..0]);
	
	is_sub = decode[4] + decode[20];
	addsub32(a[31..0],b[31..0], is_sub : add[31..0], vAddSub,cAddSub);
	s[31..0] = add[31..0] : decode[0] ;
	s[31..0] = add[31..0] : decode[16] ;
	s[31..0] = add[31..0] : decode[4] ;
	s[31..0] = add[31..0] : decode[20] ;
	
	sand[31..0] = a[31..0]*b[31..0];
	s[31..0] = sand[31..0] : decode[1];
	s[31..0] = sand[31..0] : decode[17];
	
	sor[31..0] = a[31..0]+b[31..0];
	s[31..0] = sor[31..0] : decode[2];
	s[31..0] = sor[31..0] : decode[18];
	
	sxor[31..0] = a[31..0]*/b[31..0] + /a[31..0]*b[31..0];
	s[31..0] = sxor[31..0] : decode[3];
	s[31..0] = sxor[31..0] : decode[19];
	
	umult16x16(a[15..0], b[15..0] : tmpmul[31..0]);
	s[31..0] = tmpmul[31..0] : decode[26];
	
	barrelshifter32(decode[13], b[4..0],a[31..0] : shiftr[31..0]);
	s[31..0] = shiftr[31..0] : decode[13];
	s[31..0] = shiftr[31..0] : decode[14];
	
	// SIGNEXT13
	tmp[12..0] = a[12..0];
	tmp[31..13] = a[12] * 0x7FFFF;
	s[31..0] = tmp[31..0] : decode[32];
	
	
	// SIGNEXT25
	tmp1[24..0] = a[24..0];
	tmp1[31..25] = a[24] * 0x7F;
	s[31..0] = tmp1[31..0] : decode[33];
	
	
	// SETHI
	tmp2[31..8] = a[23..0];
	tmp2[7..0]=0x00;
	s[31..0] = tmp2[31..0] : decode[35];
	
	// NOPB 
	s[31..0] = b[31..0] : decode[40];
	
	
	eN = decode[16]+decode[20]+decode[17]+decode[18]+decode[19];
	eVC = decode[16]+decode[20];
	eZ = decode[16]+decode[20]+decode[26]+decode[17]+decode[18]+decode[19];
	
	
	
	N = s[31];
	zero32(s[31..0], Z);
	C = cAddSub*decode[0] + cAddSub*decode[16] + cAddSub*decode[4] + cAddSub*decode[20];
	V = vAddSub*decode[0] + vAddSub*decode[16] + vAddSub*decode[4] + vAddSub*decode[20];
	
end module 











module reg32(rst, clk, en, d[31..0] : q[31..0])
	q[31..0] := d[31..0];
	q[31..0].clk = clk;
	q[31..0].rst = rst;
	q[31..0].ena = en;
end module 







module registres(rst, clk, areg[4..0], breg[4..0], dreg[4..0] : dbus[31..0], abus[31..0], bbus[31..0], ir[31..0], break)
	
	decoder5to32(areg[4..0]:aregdec[31..0]);
	decoder5to32(breg[4..0]:bregdec[31..0]);
	decoder5to32(dreg[4..0]:dregdec[31..0]);
	
	// REGISTRES CONSTANTS
		// RO
		r0[31..0] = 0;
		abus[31..0] = r0[31..0] : aregdec[0];
		bbus[31..0] = r0[31..0] : bregdec[0];
		
		// R20 
		r20[31..0] = 1;
		abus[31..0] = r20[31..0] : aregdec[20];
		bbus[31..0] = r20[31..0] : bregdec[20];
	
	// R1
	reg32(rst, clk, dregdec[1],dbus[31..0] : r1[31..0]);
	abus[31..0] = r1[31..0] : aregdec[1];
	bbus[31..0] = r1[31..0] : bregdec[1];

	// R2
	reg32(rst, clk, dregdec[2],dbus[31..0] : r2[31..0]);
	abus[31..0] = r2[31..0] : aregdec[2];
	bbus[31..0] = r2[31..0] : bregdec[2];

	// R3
	reg32(rst, clk, dregdec[3],dbus[31..0] : r3[31..0]);
	abus[31..0] = r3[31..0] : aregdec[3];
	bbus[31..0] = r3[31..0] : bregdec[3];

	// R4
	reg32(rst, clk, dregdec[4],dbus[31..0] : r4[31..0]);
	abus[31..0] = r4[31..0] : aregdec[4];
	bbus[31..0] = r4[31..0] : bregdec[4];

	// R5
	reg32(rst, clk, dregdec[5],dbus[31..0] : r5[31..0]);
	abus[31..0] = r5[31..0] : aregdec[5];
	bbus[31..0] = r5[31..0] : bregdec[5];

	// R6
	reg32(rst, clk, dregdec[6],dbus[31..0] : r6[31..0]);
	abus[31..0] = r6[31..0] : aregdec[6];
	bbus[31..0] = r6[31..0] : bregdec[6];

	// R7
	reg32(rst, clk, dregdec[7],dbus[31..0] : r7[31..0]);
	abus[31..0] = r7[31..0] : aregdec[7];
	bbus[31..0] = r7[31..0] : bregdec[7];

	// R8
	reg32(rst, clk, dregdec[8],dbus[31..0] : r8[31..0]);
	abus[31..0] = r8[31..0] : aregdec[8];
	bbus[31..0] = r8[31..0] : bregdec[8];

	// R9
	reg32(rst, clk, dregdec[9],dbus[31..0] : r9[31..0]);
	abus[31..0] = r9[31..0] : aregdec[9];
	bbus[31..0] = r9[31..0] : bregdec[9];	
	
	// R21 -> TMP1 
	reg32(rst, clk, dregdec[21],dbus[31..0] : r21[31..0]);
	abus[31..0] = r21[31..0] : aregdec[21];
	bbus[31..0] = r21[31..0] : bregdec[21];	
	
	// R22 -> TMP2
	reg32(rst, clk, dregdec[22],dbus[31..0] : r22[31..0]);
	abus[31..0] = r22[31..0] : aregdec[22];
	bbus[31..0] = r22[31..0] : bregdec[22];
	
	// R26 -> BRK
	reg32(rst, clk, dregdec[26],dbus[31..0] : r26[31..0]);
	abus[31..0] = r26[31..0] : aregdec[26];
	bbus[31..0] = r26[31..0] : bregdec[26];
	
	// R27 -> FP
	reg32(rst, clk, dregdec[27],dbus[31..0] : r27[31..0]);
	abus[31..0] = r27[31..0] : aregdec[27];
	bbus[31..0] = r27[31..0] : bregdec[27];
	
	// R28 -> RET 
	reg32(rst, clk, dregdec[28],dbus[31..0] : r28[31..0]);
	abus[31..0] = r28[31..0] : aregdec[28];
	bbus[31..0] = r28[31..0] : bregdec[28];
	
	// R29 -> SP 
	reg32(rst, clk, dregdec[29],dbus[31..0] : r29[31..0]);
	abus[31..0] = r29[31..0] : aregdec[29];
	bbus[31..0] = r29[31..0] : bregdec[29];
	
	// R30 -> PC
	reg32(rst, clk, dregdec[30],dbus[31..0] : r30[31..0]);
	abus[31..0] = r30[31..0] : aregdec[30];
	bbus[31..0] = r30[31..0] : bregdec[30];
	
	// R31 -> IR
	reg32(rst, clk, dregdec[31],dbus[31..0] : r31[31..0]);
	abus[31..0] = r31[31..0] : aregdec[31];
	bbus[31..0] = r31[31..0] : bregdec[31];
	ir[31..0] = r31[31..0];
	
	eq32(r26[31..0],r30[31..0]:break);

end module












module micromachine(rst, clk, areg[4..0], breg[4..0], dreg[4..0], cmd_ual[5..0], oe_num[1..0], 
					write, monitor[31..0], switch[7..0], swClk : 
									dbus[31..0], N, Z, V, C, ir[31..0], break, leds[7..0])

	// Controle de bus en ecriture
	decoder2to4(oe_num[1..0] : oe[3..0]);

	// Gestion adresses 
	decoder4to16(abus[31..28] : cs[15..0]);

	// RAM 
	tmpAddr[8..0] = abus[8..0];
	wr = write * cs[0];
	rams_asyn_read512x32(clk, wr, tmpAddr[8..0], dbus[31..0] : dbus_ram[31..0]);
			
	// Reg8 		
		// LED
		enLED = write * cs[11];
		reg8(rst, clk, enLED, dbus[7..0] : leds[7..0]);
		
		// SWITCHES
		reg8(rst, swClk, 1, switch[7..0] : qSwitch[7..0]);
		reg8ext32[7..0] = qSwitch[7..0];
		reg8ext32[31..8] = 0;
	

	// Registres
	dbus[31..0] = dbus_ual[31..0] : oe[1] ;
	cond_dbus_RAM = oe[2]*cs[0];
	dbus[31..0] = dbus_ram[31..0] : cond_dbus_RAM;
	dbus[31..0] = monitor[31..0] : oe[3];
	cond_dbus_SWITCH = oe[2]*cs[9];
	dbus[31..0] = reg8ext32[31..0] : cond_dbus_SWITCH;
	 
	 
	registres(rst, clk, areg[4..0], breg[4..0], dreg[4..0] : dbus[31..0], abus[31..0], bbus[31..0], ir[31..0], break);


	// UAL 
	ual(abus[31..0],bbus[31..0],cmd_ual[5..0] : dbus_ual[31..0],eVC,eN,eZ,N_ual,Z_ual,V_ual,C_ual);

	N := N_ual;
	N.clk = clk;
	N.rst = rst;
	N.ena = eN;

	Z := Z_ual;
	Z.clk = clk;
	Z.rst = rst;
	Z.ena = eZ;

	V := V_ual;
	V.clk = clk;
	V.rst = rst;
	V.ena = eVC;

	C := C_ual;
	C.clk = clk;
	C.rst = rst;
	C.ena = eVC;



	
	
end module